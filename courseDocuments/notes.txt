Link to course: https://www.udemy.com/course/rest-api-automation-testing-rest-assured

Set up the project as a Maven project
Maven is used to managed dependencies

in src/main/java
================
create a package (let us call it app)
packages are useful when grouping resources

in pom.xml
==========
add <dependencies> tag and add all your dependencies in it
<dependency>
  ...
</dependency>

you can find maven packages on: https://mvnrepository.com/

for each dependency,  make sure you set the correct scope
remove it though to keep things simple as classes in "main" will not be able to access "scope: test" for example

The following matchers are static, IDEs will not fill automatically
-------------------------------------------------------------------
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

Below is how to import from custom package
------------------------------------------
import files.Payload;

Rest-Assured
============
given() / when() / then()
given: used to set up the request data
when: used to set up the request path
then: used after getting the response

.log().all can be chained to log

Chain HTTP request method to when(): .get("/path"), .post("/path"), .put("/path")... etc
Naming conventions:
endpoint: api.anghami.com
base url: https://api.anghami.com
path: anything after base url
resource, what comes after the slash api.anghami.com/public => "public"
sub-resource: api.anghami.com/public/user => "user"
QueryString: anything after "?"

Hamcrest Lib
============
Provides matcher and allows you to create your own => useful with TestNG or Rest-Assured style assertions
can also be used with JUnit

JsonPath
========
import io.restassured.path.json.JsonPath;
Lib comes with restassured and allows you to parse json in an easy way

Reading from .json file:
=========================
new String(Files.readAllBytes(Paths.get("./........./.json")))
from File -> Bytes -> String

Accessing deep JSON data
------------------------
using JsonPath object: js.getString("courses[0].title")
"courses.size()" => gets array length and can be with iterators like for()

PS: Break; from loops when you can

Parametrization
===============
Annotation above method name: @Test(dataProvider = "booksData")
Annotation above data provider @DataProvider(name="booksData")
the latter normally returns arrays: Object[] or Object[][]...

IntelliJ IDEA and TestNG
========================
The plugin comes already installed
once the @Test annotation is added, IntelliJ will detect this automatically and run it with TestNG

Set up Jira Locally for lecture
===============================
On OsX/Linux
https://www.atlassian.com/software/jira/download;

put the extracted folder in home directory
go into it, find the conf/server.xml file and add the following to <context>
<Parameter name="jira.home" value="/Users/joseph/jira/home"/>
path needs to be absolute
https://docs.atlassian.com/software/jira/docs/api/REST/8.22.1/

From Jira page, on top right, Select Settings Icon > System > Attachments (under Advanced): Set Allow Attachments to ON
Make it us the default folder under jira.home for ease of use

When dealing with REST APIs:
============================
Path parameters can be set in the following manner
given().pathParam("id", 10000)
...
.when().post("/rest/api/2/issue/{id}/comment")

SessionFilter can be used to propagate session information such as cookies to all subsequent requests
SessionFilter sessionFilter = new SessionFilter();
...
.filter(sessionFilter).when()
...

Depending on the system, files might need to be uploaded using multi-part
some libs like rest-assured already provide this, for example
.multiPart("file", new File("jira.txt"))
File() => path is project root by default => better for later, figure out a way to put this data
in the resources folder and fetch it when needed
=> needs a header "content-type" "multipart/form-data"

.relaxedHTTPSValidation() => this method can be used after given() in case res-assured if having trouble dealing with
the server certificate, as a certificate check might not be required for such tests

.header().header().header() => these can be chained to add headers

Personal Note: it is better to use a hashmap for headers like this:
:w
Map<String, String> headersMap = new HashMap<String, String>();
headersMap.put("X-Atlassian-Token", "no-check");
headersMap.put("Content-Type", "multipart/form-data");
...
given().headers(headersMap)

OAuth2 with Google
==================
Call URL with client ID and redirect URL to get code
Use code with client ID and client Secret to get accessToken

POJO and Deserialization
========================
Create classes that map to how the JSON you want to deserialize looks like
In the case of arrays, use List<E> for return type and private variables

you can the deserialize using with Gson, Jackson or what already come with rest-assured
.as(GetCourse.class);

NOTE: Read https://www.baeldung.com/jackson-vs-gson
Pick one, you do not need both

Iterating over lists
====================
The old fashion way
List<Api> apiList = responseDeserialized.getCourses().getApi();
        for (int i = 0; i < apiList.size(); i++) {
            ...
        }

New methods using forEach, advanced for loop and iterators and listIterators:
https://crunchify.com/how-to-iterate-through-java-list-4-way-to-iterate-through-loop/

Arrays.asList() => this is used to convert arrays into lists
comparing ArrayLists (or Lists) is easier then comparing Arrays and ArrayLists (or Lists)
=> i.e comparing 2 collections of the same Type is easier than dealing with different types
since we can then do:
Assert.assertTrue(list1.equals(list2))

Spec Builder
============
RequestSpecification rsb = new RequestSpecBuilder()
ResponseSpecification resSpecB = new ResponseSpecBuilder()
=> used to define all common variables to reduce repeated code.

Configuring maven
=================
maven is not just for packages, but also for frameworks
download search for apache maven and download
extract
set up MAVEN_HOME to point to extracted folder
add mvn binary to the path

groupid => project name (can contain multiple projects)
artifcatid => subproject
version => the version to install

To create a basic maven project
mvn archetype:generate -DgroupId=com.apitests.app -DartifactId=ApiTests -DarchetypeArtifcatId=maven-archetype-quickstart -DinteractiveMode=false
groupId => Package name
artifactId => Project name

Cucumber / Gherkin
==================
Files must end with extension .feature
Feature files are test suites with multiple scenarios

Maven can provide Cucumber project skeleton
needed requirements
cucumber-java
cucumber-junit